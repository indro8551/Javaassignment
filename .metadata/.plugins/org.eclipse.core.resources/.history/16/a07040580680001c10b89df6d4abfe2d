package org.stepDefinition;

import org.apache.log4j.Logger;
import org.base.Base;
import org.junit.Assert;
import org.pagemanager.Singleton;
import org.pojo.AddAttributePage;
import org.pojo.AddParameterPage;
import org.pojo.AddProductPage;
import org.pojo.EditProductPage;
import org.pojo.HomePage;
import org.pojo.ProductPage;
import org.pojo.TreatmentPage;
import org.pojo.WoundAttributePage;

import cucumber.api.java.en.And;
import cucumber.api.java.en.Then;

public class TreatmentSteps extends Base {

	Singleton singleton = new Singleton();
	HomePage homePage;
	WoundAttributePage woundAttributePage;
	AddAttributePage addAttributePage;
	AddParameterPage addParameterPage;
	TreatmentPage treatmentPage;
	ProductPage productPage;
	AddProductPage addProductPage;
	EditProductPage editProductPage;
	private static Logger Log = Logger.getLogger(TreatmentSteps.class.getName());

	@Then("^User should be redirected to treatment page$")
	public void user_should_be_redirected_to_treatment_page() throws Throwable {
		treatmentPage = singleton.getTreatmentPage();
		try {

			fluentLWaits(treatmentPage.getTreatmentTableHeader(), 1, 2);
			Assert.assertTrue("Treatment page is not displayed", treatmentPage.getTreatmentTableHeader().size() > 0);
			Log.info("Treatment page is dispalyed");
			screenshot("Treatment");
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("To validate the treatment page");
		}
	}

	@Then("^User should validate the Add Edit and Delete button in treatment page$")
	public void user_should_validate_the_add_edit_and_delete_button_in_treatment_page() throws Throwable {
		treatmentPage = singleton.getTreatmentPage();
		try {

			if (treatmentPage.getTreatmentTableHeader().size() > 0) {

				Assert.assertTrue("Add Treatment button is disabled", treatmentPage.getBtnAddTreatment().isDisplayed());
				Log.info("Add Treatment button is enabled");

				Assert.assertTrue("Edit Treatment button is enabled",
						treatmentPage.getBtnLstEditTreatmment().get(0).getAttribute("class").contains("disable"));
				Log.info("Edit product button is Disabled");

				Assert.assertTrue("Delete Treatment button is enabled",
						treatmentPage.getBtnLstDeleteTreatmment().get(0).getAttribute("class").contains("disable"));
				Log.info("Delete Treatment button is disabled");

			} else {
				Assert.assertTrue("Not a treatment page", false);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("To validate the Add edit and delete button in the treatment page");
		}
	}

	public static String selectedTreatmentName;

	@Then("^User select any treatment option$")
	public void user_select_any_treatment_option() throws Throwable {
		treatmentPage = singleton.getTreatmentPage();
		try {

			if (treatmentPage.getTreatmentTableHeader().size() > 0) {

				// fluentLWaits(treatmentPage.getCheckBoxLstTreatment(), 2, 3);

				Thread.sleep(5000);

				btnClick(treatmentPage.getCheckBoxLstTreatment().get(0));

				Log.info("Treatment checkbox is selected");

				selectedTreatmentName = treatmentPage.getTxtTreatmentName().getText();

				Log.info("Selected Treatment Name is - " + selectedTreatmentName);

				Assert.assertTrue("Treatment option is not selected",
						treatmentPage.getCheckBoxLstTreatment().get(0).isSelected());
				Log.info("Treatment Option is selected");
			} else {
				Assert.assertTrue("Not a treatment page", false);
			}

		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("Selecting any treatment option");
		}
	}

	@Then("^User should validate the Edit, Delete, Product and WoundParameters buttons are enabled in treatment page$")
	public void user_should_validate_the_edit_delete_product_and_woundparameters_buttons_are_enabled_in_treatment_page()
			throws Throwable {
		treatmentPage = singleton.getTreatmentPage();
		try {

			Assert.assertTrue("Add treatment button is disabled", treatmentPage.getBtnAddTreatment().isEnabled());
			Log.info("Add treatment button is enabled");

			Assert.assertTrue("Delete treatment button is disabled",
					treatmentPage.getBtnDeleteTreatmment().isEnabled());
			Log.info("Delete treatment button is enabled");

			Assert.assertTrue("Edit treatment button is disabled", treatmentPage.getBtnEditTreatmment().isEnabled());
			Log.info("Edit treatment button is enabled");

			Assert.assertTrue("Products button is disabled", treatmentPage.getBtnProducts().isEnabled());
			Log.info("Products treatment button is enabled");

			Assert.assertTrue("Wound Paramters button is disabled", treatmentPage.getBtnWoundParameters().isEnabled());
			Log.info("Wound Parameters treatment button is enabled");

		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("Validating the buttons are enabled");
		}

	}

	@And("^User click on Wound Paramters button in treatment page$")
	public void user_click_on_wound_paramters_button_in_treatment_page() throws Throwable {
		treatmentPage = singleton.getTreatmentPage();
		try {

			fluentLWaits(treatmentPage.getBtnLstWoundParameters(), 1, 3);

			btnClick(treatmentPage.getBtnWoundParameters());
			Log.info("Wound Parameters button is clicked");

		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("Clicking on wound parameters button in treatment page");
		}
	}

	@Then("^User should validate the parameters and treatment mapping is shown$")
	public void user_should_validate_the_parameters_and_treatment_mapping_is_shown() throws Throwable {
		treatmentPage = singleton.getTreatmentPage();

		try {

			Assert.assertTrue("Mapping page is not displayed",
					treatmentPage.getDescTreatmentHeaderMapping().isDisplayed());
			Log.info("Mapping page is displayed");

			Assert.assertTrue("Mapping page Attribute Name is not displayed",
					treatmentPage.getHeaderMappingPage().get(0).isDisplayed());
			Log.info("Mapping Attribute Name Header is displayed");
			Assert.assertTrue("Mapping Parameter Code Header not displayed",
					treatmentPage.getHeaderMappingPage().get(1).isDisplayed());
			Log.info("Mapping Parameter Code Header is displayed");
			Assert.assertTrue("Mapping Parameter Desc Header not displayed",
					treatmentPage.getHeaderMappingPage().get(2).isDisplayed());
			Log.info("Mapping Parameter Desc is displayed");

		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("Validating the parameters and treatment mapping is shown");
		}
	}

	@Then("^User should validate selected treatment option is displayed in mapping page$")
	public void user_should_validate_selected_treatment_option_is_displayed_in_mapping_page() throws Throwable {
		treatmentPage = singleton.getTreatmentPage();
		try {

			String[] text = treatmentPage.getDescTreatmentHeaderMapping().getText().split(":");

			Log.info(text[1].trim());

			Assert.assertTrue("selected treatment is not matched ", selectedTreatmentName.equals(text[1].trim()));
			Log.info("selected treatment is matched with the wound parameter treatment");

		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("Validatig the selected treatment option");
		}

	}

	@Then("^User should validate the button in the treatment mapping screen$")
	public void user_should_validate_the_button_in_the_treatment_mapping_screen() throws Throwable {

		treatmentPage = singleton.getTreatmentPage();
		try {

			Assert.assertTrue("Add parameter button is not displayed ",
					treatmentPage.getBtnAddParameters().isDisplayed());
			Log.info("Add parameter button is displayed");
			Assert.assertTrue("Remove parameter button is not displayed ",
					treatmentPage.getBtnRemoveParameters().isDisplayed());
			Log.info("Remove parameter button is displayed");
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("Validating the button in the treatment mapping screen");
		}
	}

	

	@Then("^User should verify whether the mapping screen displays the already linked parameters for the selected treatment$")
	public void user_should_verify_whether_the_mapping_screen_displays_the_already_linked_parameters_for_the_selected_treatment()
			throws Throwable {
		treatmentPage = singleton.getTreatmentPage();
		try {
			
			
			if (treatmentPage.getDescTreatmentHeaderMapping().isDisplayed()) {
				
				if (treatmentPage.getLstCheckbox().size()>0) {
				
					Assert.assertTrue("LstParameterCode is not displayed",treatmentPage.getLstParameterCodeCol().size()>0);
					Log.info("LstParameterCode is displayed");
					
					Assert.assertTrue("LstParameterDesc is not displayed",treatmentPage.getLstParameterDescCol().size()>0);
					Log.info("LstParameterDesc is displayed");
				}else {
					Assert.assertTrue("Parameter code is not  dispayed", treatmentPage.getBtnParameterCodes().isDisplayed());
					Log.info("Remove parameter code  is displayed");	
					
					Assert.assertTrue("LstParameterCode is not displayed",treatmentPage.getLstParameterCodeCol().size()>0);
					Log.info("LstParameterCode is displayed");
					
					Assert.assertTrue("LstParameterDesc is not displayed",treatmentPage.getLstParameterDescCol().size()>0);
					Log.info("LstParameterDesc is displayed");
				}
				
				
				

				
			}
			

		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("Validating the button in the treatment mapping screen");
		}
	}

	@Then("^User shoud verify the mapping screen displays the description  for treatment$")
	public void user_shoud_verify_the_mapping_screen_displays_the_description_for_treatment() throws Throwable {
		treatmentPage = singleton.getTreatmentPage();
		try {

			Assert.assertTrue("Parameter description is not  dispayed",
					treatmentPage.getBtnLstParameterDescription().isDisplayed());
			Log.info("Remove parameter description is displayed");

		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("Validating the button in the treatment mapping screen");
		}
	}

	@Then("^User shoud Validate add parameter button$")
	public void user_shoud_validate_add_parameter_button() throws Throwable {
		treatmentPage = singleton.getTreatmentPage();
		try {

		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("Validating the button in the treatment mapping screen");
		}
	}
}
